%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<< /F1 2 0 R /F2 3 0 R /F3 4 0 R >>
endobj
2 0 obj
<< /BaseFont /Helvetica /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font >>
endobj
3 0 obj
<< /BaseFont /Helvetica-Bold /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font >>
endobj
4 0 obj
<< /BaseFont /Courier /Encoding /WinAnsiEncoding /Name /F3 /Subtype /Type1 /Type /Font >>
endobj
5 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 10 0 R /XYZ 68.69291 384.9843 0 ] /Rect [ 238.2717 569.7736 242.7197 581.7736 ] /Subtype /Link /Type /Annot >>
endobj
6 0 obj
<< /Annots [ 5 0 R ] /Contents 21 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 20 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 
  /Trans <<  >> /Type /Page >>
endobj
7 0 obj
<< /Contents 22 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 20 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 /Trans <<  >> 
  /Type /Page >>
endobj
8 0 obj
<< /Border [ 0 0 0 ] /Contents () /Dest [ 6 0 R /XYZ 237.7529 583.0236 0 ] /Rect [ 68.69291 371.7343 74.25291 383.7343 ] /Subtype /Link /Type /Annot >>
endobj
9 0 obj
<< /A << /S /URI /Type /Action /URI (http://lmgtfy.com/?q=how+to+make+a+tarball) >> /Border [ 0 0 0 ] /Rect [ 153.7323 371.7343 532.5827 383.7343 ] /Subtype /Link /Type /Annot >>
endobj
10 0 obj
<< /Annots [ 8 0 R 9 0 R ] /Contents 23 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 20 0 R /Resources << /Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ] >> /Rotate 0 
  /Trans <<  >> /Type /Page >>
endobj
11 0 obj
<< /Outlines 13 0 R /PageLabels 24 0 R /PageMode /UseNone /Pages 20 0 R /Type /Catalog >>
endobj
12 0 obj
<< /Author () /CreationDate (D:20170222164408-01'00') /Creator (\(unspecified\)) /Keywords () /Producer (ReportLab PDF Library - www.reportlab.com) /Subject (\(unspecified\)) 
  /Title (Assignment 3: Binary trees and Huffman coding) >>
endobj
13 0 obj
<< /Count 6 /First 14 0 R /Last 19 0 R /Type /Outlines >>
endobj
14 0 obj
<< /Dest [ 6 0 R /XYZ 62.69291 689.0236 0 ] /Next 15 0 R /Parent 13 0 R /Title (Objectives) >>
endobj
15 0 obj
<< /Dest [ 6 0 R /XYZ 62.69291 638.0236 0 ] /Next 16 0 R /Parent 13 0 R /Prev 14 0 R /Title (Requirements) >>
endobj
16 0 obj
<< /Dest [ 6 0 R /XYZ 62.69291 545.0236 0 ] /Next 17 0 R /Parent 13 0 R /Prev 15 0 R /Title (Behavior of the encoder and decoder programs) >>
endobj
17 0 obj
<< /Dest [ 6 0 R /XYZ 62.69291 218.0236 0 ] /Next 18 0 R /Parent 13 0 R /Prev 16 0 R /Title (Order of work \(strongly suggested\)) >>
endobj
18 0 obj
<< /Dest [ 7 0 R /XYZ 62.69291 198.6236 0 ] /Next 19 0 R /Parent 13 0 R /Prev 17 0 R /Title (Grading) >>
endobj
19 0 obj
<< /Dest [ 10 0 R /XYZ 62.69291 603.0236 0 ] /Parent 13 0 R /Prev 18 0 R /Title (Overview of Huffman coding) >>
endobj
20 0 obj
<< /Count 3 /Kids [ 6 0 R 7 0 R 10 0 R ] /Type /Pages >>
endobj
21 0 obj
<< /Length 9121 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 4 Tm /F2 20 Tf 24 TL 6.014882 0 Td (Assignment 3: Binary trees and Huffman coding) Tj T* -6.014882 0 Td ET
Q
Q
q
1 0 0 1 62.69291 716.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 48.03937 0 Td (Date:) Tj T* -48.03937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (22-02-2017) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 701.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.02937 0 Td (Deadline:) Tj T* -28.02937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (03-03-2017 23:59) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 668.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Objectives) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 650.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (You must implement a data \(de\)compressor and exercise your understanding of binary trees.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 617.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Requirements) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 587.0236 cm
q
BT 1 0 0 1 0 14 Tm 2.027126 Tw 12 TL /F1 10 Tf 0 0 0 rg (Your deliverable must contain two programs ) Tj /F3 10 Tf 0 0 0 rg (encode ) Tj /F1 10 Tf 0 0 0 rg (and ) Tj /F3 10 Tf 0 0 0 rg (decode) Tj /F1 10 Tf 0 0 0 rg (, behaving as detailed in the next) Tj T* 0 Tw (section.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 557.0236 cm
q
BT 1 0 0 1 0 14 Tm .064846 Tw 12 TL /F1 10 Tf 0 0 0 rg (You must submit your work as a tarball ) Tj /F1 8 Tf 0 0 .501961 rg 5 Ts (1) Tj /F1 10 Tf 0 0 0 rg 0 Ts (. Next to the source code, your archive must contain a text file file) Tj T* 0 Tw (named \223) Tj /F3 10 Tf 0 0 0 rg (AUTHORS) Tj /F1 10 Tf 0 0 0 rg (\224 containing your name and Student ID\(s\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 524.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Behavior of the encoder and decoder programs) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 506.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf 0 0 0 rg (encode ) Tj /F1 10 Tf 0 0 0 rg (program must:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 500.0236 cm
Q
q
1 0 0 1 62.69291 500.0236 cm
Q
q
1 0 0 1 62.69291 476.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .409984 Tw 12 TL /F1 10 Tf 0 0 0 rg (accept an optional command-line argument that specifies which tree it should use -- if this argument) Tj T* 0 Tw (is not specified, the ) Tj /F3 10 Tf 0 0 0 rg (encode ) Tj /F1 10 Tf 0 0 0 rg (program should decide a Huffman tree itself;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 470.0236 cm
Q
q
1 0 0 1 62.69291 458.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (read data to encode from its standard input; and) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 452.0236 cm
Q
q
1 0 0 1 62.69291 320.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 117 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 117 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (produce on its standard output:) Tj T* ET
Q
Q
q
1 0 0 1 23 111 cm
Q
q
1 0 0 1 23 111 cm
Q
q
1 0 0 1 23 87 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .150574 Tw 12 TL /F1 10 Tf 0 0 0 rg (on the first line, a representation of a Huffman tree it used, using the format documented for the) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (print_tree ) Tj /F1 10 Tf 0 0 0 rg (function;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 81 cm
Q
q
1 0 0 1 23 57 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.097485 Tw 12 TL /F1 10 Tf 0 0 0 rg (starting from the 2nd line, the encoding of the input data in ASCII-coded binary, that is using) Tj T* 0 Tw (one full character ") Tj /F3 10 Tf 0 0 0 rg (0) Tj /F1 10 Tf 0 0 0 rg (" for binary 0 and one full character ") Tj /F3 10 Tf 0 0 0 rg (1) Tj /F1 10 Tf 0 0 0 rg (" for binary 1;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 51 cm
Q
q
1 0 0 1 23 39 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (at the end of the encoded data, the final marker character ") Tj /F3 10 Tf 0 0 0 rg (.) Tj /F1 10 Tf 0 0 0 rg (" followed by a newline character;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 33 cm
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL 2.034985 Tw (on the last line of output: the number of characters from the input that were encoded, the) Tj T* 0 Tw 1.027485 Tw (number of nodes in the Huffman tree, the number of binary digits in the encoded output, and) Tj T* 0 Tw (the compression ratio as percentage \(rounded down\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 320.0236 cm
Q
q
1 0 0 1 62.69291 302.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf 0 0 0 rg (decode ) Tj /F1 10 Tf 0 0 0 rg (program must read data from its standard input:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 296.0236 cm
Q
q
1 0 0 1 62.69291 296.0236 cm
Q
q
1 0 0 1 62.69291 284.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (on the first line, a representation of a Huffman tree using the same format as ) Tj /F3 10 Tf 0 0 0 rg (encode) Tj /F1 10 Tf 0 0 0 rg (;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 278.0236 cm
Q
q
1 0 0 1 62.69291 266.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (starting from the 2nd line, the encoded input data in ASCII-coded binary, terminated by ") Tj /F3 10 Tf 0 0 0 rg (.) Tj /F1 10 Tf 0 0 0 rg (";) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 260.0236 cm
Q
q
1 0 0 1 62.69291 248.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the remainder of the input, if any, is silently discarded.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 248.0236 cm
Q
q
1 0 0 1 62.69291 230.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Then prints on its standard output the result of decoding the provided input using the provided tree.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 197.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Order of work \(strongly suggested\)) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 185.0236 cm
Q
q
1 0 0 1 62.69291 185.0236 cm
Q
q
1 0 0 1 62.69291 95.02362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 75 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 63 cm
q
BT 1 0 0 1 0 14 Tm 2.210888 Tw 12 TL /F1 10 Tf 0 0 0 rg (Implement the missing ) Tj /F3 10 Tf 0 0 0 rg (print_tree\(\) ) Tj /F1 10 Tf 0 0 0 rg (function which represents its tree argument using RPN) Tj T* 0 Tw (notation:) Tj T* ET
Q
Q
q
1 0 0 1 23 57 cm
Q
q
1 0 0 1 23 57 cm
Q
q
1 0 0 1 23 45 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (a single node tree with node value ) Tj /F3 10 Tf 0 0 0 rg (X ) Tj /F1 10 Tf 0 0 0 rg (is printed as ) Tj /F3 10 Tf 0 0 0 rg (X) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 39 cm
Q
q
1 0 0 1 23 15 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .698876 Tw (the binary tree with two children X and Y is printed by printing X, then printing Y, then printing) Tj T* 0 Tw (".".) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 15 cm
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (For example this tree:) Tj T* ET
Q
Q
q
Q
Q
 
endstream
endobj
22 0 obj
<< /Length 9282 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 522.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 229.4 Tm  T* ET
q
1 0 0 1 23 178.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F3 10 Tf 12 TL (\(root\)) Tj T* ( /  \\) Tj T* (A   / \\) Tj T* (   B   C) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 152.2 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Will be printed as: ) Tj /F3 10 Tf 0 0 0 rg (ABC..) Tj T* ET
Q
Q
q
1 0 0 1 23 134.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (And this tree:) Tj T* ET
Q
Q
q
1 0 0 1 23 65 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 445.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F3 10 Tf 12 TL (  \(root\)) Tj T* (  /    \\) Tj T* ( / \\    C) Tj T* (A   B) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 23 39 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Will be printed as: ) Tj /F3 10 Tf 0 0 0 rg (AB.C.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm 2.494597 Tw 12 TL /F1 10 Tf 0 0 0 rg (You can test your ) Tj /F3 10 Tf 0 0 0 rg (print_tree\(\) ) Tj /F1 10 Tf 0 0 0 rg (at this point by uncommenting the ) Tj /F3 10 Tf 0 0 0 rg (print_tree\(\) ) Tj /F1 10 Tf 0 0 0 rg (call in) Tj T* 0 Tw .71186 Tw /F3 10 Tf 0 0 0 rg (decode.c ) Tj /F1 10 Tf 0 0 0 rg (and running ) Tj /F3 10 Tf 0 0 0 rg (./decode ) Tj /F1 10 Tf 0 0 0 rg (with any kind of input. This will use the fixed tree generated by) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (fixed_tree\(\)) Tj /F1 10 Tf 0 0 0 rg (. Verify that your output matches that tree.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 516.6236 cm
Q
q
1 0 0 1 62.69291 372.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 129 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 117 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.851412 Tw (Using the provided example Huffman tree in the code as constant tree input \(ignoring the) Tj T* 0 Tw (command-line argument\), complete:) Tj T* ET
Q
Q
q
1 0 0 1 23 111 cm
Q
q
1 0 0 1 23 111 cm
Q
q
1 0 0 1 23 99 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (the definition of the ) Tj /F3 10 Tf 0 0 0 rg (code ) Tj /F1 10 Tf 0 0 0 rg (struct \(you need to decide this yourself\);) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 93 cm
Q
q
1 0 0 1 23 81 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (the function ) Tj /F3 10 Tf 0 0 0 rg (compute_code_table\(\) ) Tj /F1 10 Tf 0 0 0 rg (which translates a tree to a code table,) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 75 cm
Q
q
1 0 0 1 23 51 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.628443 Tw 12 TL /F1 10 Tf 0 0 0 rg (the function ) Tj /F3 10 Tf 0 0 0 rg (print_code\(\) ) Tj /F1 10 Tf 0 0 0 rg (which prints the encoded sequence of ) Tj /F3 10 Tf 0 0 0 rg (0 ) Tj /F1 10 Tf 0 0 0 rg (and ) Tj /F3 10 Tf 0 0 0 rg (1 ) Tj /F1 10 Tf 0 0 0 rg (character for) Tj T* 0 Tw (each input character.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 51 cm
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 38 Tm .433984 Tw 12 TL /F1 10 Tf 0 0 0 rg (This way, the provided ) Tj /F3 10 Tf 0 0 0 rg (encode ) Tj /F1 10 Tf 0 0 0 rg (program can use both your ) Tj /F3 10 Tf 0 0 0 rg (print_tree ) Tj /F1 10 Tf 0 0 0 rg (function from step 1 and) Tj T* 0 Tw 2.745868 Tw (your algorithm in this step to produce a coded tree and a coded input valid for the provided) Tj T* 0 Tw .345318 Tw /F3 10 Tf 0 0 0 rg (decode.ref ) Tj /F1 10 Tf 0 0 0 rg (program. You can then use ) Tj /F3 10 Tf 0 0 0 rg (decode.ref ) Tj /F1 10 Tf 0 0 0 rg (to check whether your work up to this point) Tj T* 0 Tw (is correct. The command ) Tj /F3 10 Tf 0 0 0 rg (echo) Tj ( ) Tj ("abca") Tj ( ) Tj (|) Tj ( ) Tj (./encode) Tj ( ) Tj ( ) Tj (|) Tj ( ) Tj (./decode.ref ) Tj /F1 10 Tf 0 0 0 rg (should print ) Tj /F3 10 Tf 0 0 0 rg (abca) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 366.6236 cm
Q
q
1 0 0 1 62.69291 324.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 27 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 14 Tm .075318 Tw 12 TL /F1 10 Tf 0 0 0 rg (Again using the provided example Huffman tree as constant \(ignoring the first line of input\), complete) Tj T* 0 Tw (the ) Tj /F3 10 Tf 0 0 0 rg (main\(\) ) Tj /F1 10 Tf 0 0 0 rg (function of ) Tj /F3 10 Tf 0 0 0 rg (decode ) Tj /F1 10 Tf 0 0 0 rg (to decompress input data using that tree.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (You can then use your ) Tj /F3 10 Tf 0 0 0 rg (encode ) Tj /F1 10 Tf 0 0 0 rg (program from step 2 to check your newly minted ) Tj /F3 10 Tf 0 0 0 rg (decode ) Tj /F1 10 Tf 0 0 0 rg (program.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 318.6236 cm
Q
q
1 0 0 1 62.69291 240.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 63 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
BT 1 0 0 1 0 26 Tm .721647 Tw 12 TL /F1 10 Tf 0 0 0 rg (Complete your ) Tj /F3 10 Tf 0 0 0 rg (decode ) Tj /F1 10 Tf 0 0 0 rg (program by implementing the missing ) Tj /F3 10 Tf 0 0 0 rg (load_tree ) Tj /F1 10 Tf 0 0 0 rg (function which reads a) Tj T* 0 Tw .824597 Tw (tree definition created by ) Tj /F3 10 Tf 0 0 0 rg (print_tree ) Tj /F1 10 Tf 0 0 0 rg (and re-creates the corresponding tree. Hint: you may want) Tj T* 0 Tw (to use the generic stack implemented in ) Tj /F3 10 Tf 0 0 0 rg (stack.c) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm .897984 Tw 12 TL /F1 10 Tf 0 0 0 rg (Then you can use the provided ) Tj /F3 10 Tf 0 0 0 rg (encode.ref ) Tj /F1 10 Tf 0 0 0 rg (to check that your decode program can now handle) Tj T* 0 Tw 1.814983 Tw (inputs with different trees. Check if the trees printed by ) Tj /F3 10 Tf 0 0 0 rg (encode.ref ) Tj /F1 10 Tf 0 0 0 rg (and ) Tj /F3 10 Tf 0 0 0 rg (decode ) Tj /F1 10 Tf 0 0 0 rg (match. The) Tj T* 0 Tw (command ) Tj /F3 10 Tf 0 0 0 rg (echo) Tj ( ) Tj ("xxyzzz") Tj ( ) Tj (|) Tj ( ) Tj (./encode.ref) Tj ( ) Tj (|) Tj ( ) Tj (./decode ) Tj /F1 10 Tf 0 0 0 rg (should print ) Tj /F3 10 Tf 0 0 0 rg (xxyzzz) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 234.6236 cm
Q
q
1 0 0 1 62.69291 210.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .02748 Tw 12 TL /F1 10 Tf 0 0 0 rg (Complete your ) Tj /F3 10 Tf 0 0 0 rg (encode ) Tj /F1 10 Tf 0 0 0 rg (program by writing the ) Tj /F3 10 Tf 0 0 0 rg (compute_tree\(\) ) Tj /F1 10 Tf 0 0 0 rg (algorithm that creates an optimal) Tj T* 0 Tw (Huffman tree from the input, instead of using the provided example.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 210.6236 cm
Q
q
1 0 0 1 62.69291 177.6236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Grading) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 159.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Your grade starts from 0, and the following tests determine your grade:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 153.6236 cm
Q
q
1 0 0 1 62.69291 153.6236 cm
Q
q
1 0 0 1 62.69291 141.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (+0,5pt if you have submitted an archive in the right format with an ) Tj /F3 10 Tf 0 0 0 rg (AUTHORS ) Tj /F1 10 Tf 0 0 0 rg (file.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 135.6236 cm
Q
q
1 0 0 1 62.69291 111.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 2.048555 Tw 12 TL /F1 10 Tf 0 0 0 rg (+0,5pt if your source code builds without errors and you have modified ) Tj /F3 10 Tf 0 0 0 rg (tree.c) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F3 10 Tf 0 0 0 rg (encode.c ) Tj /F1 10 Tf 0 0 0 rg (or) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (decode.c ) Tj /F1 10 Tf 0 0 0 rg (in any way.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 105.6236 cm
Q
q
1 0 0 1 62.69291 93.62362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (+1pt if your ) Tj /F3 10 Tf 0 0 0 rg (print_tree ) Tj /F1 10 Tf 0 0 0 rg (function works.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 87.62362 cm
Q
 
endstream
endobj
23 0 obj
<< /Length 5830 >>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 753.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (+2pt if your ) Tj /F3 10 Tf 0 0 0 rg (encode ) Tj /F1 10 Tf 0 0 0 rg (program works using only the provided example tree.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 747.0236 cm
Q
q
1 0 0 1 62.69291 735.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (+2pt if your ) Tj /F3 10 Tf 0 0 0 rg (decode ) Tj /F1 10 Tf 0 0 0 rg (program works using only the provided example tree.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 729.0236 cm
Q
q
1 0 0 1 62.69291 717.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (-1pt if ) Tj /F3 10 Tf 0 0 0 rg (valgrind ) Tj /F1 10 Tf 0 0 0 rg (reports errors while running your converter.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 711.0236 cm
Q
q
1 0 0 1 62.69291 699.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (-1pt if ) Tj /F3 10 Tf 0 0 0 rg (clang) Tj ( ) Tj (-W) Tj ( ) Tj (-Wall ) Tj /F1 10 Tf 0 0 0 rg (reports warnings when compiling your code) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 699.0236 cm
Q
q
1 0 0 1 62.69291 669.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.365868 Tw (The following extra features will be tested to obtain higher grades, but only if you have obtained a) Tj T* 0 Tw (minimum of 5 points on the list above already:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 663.0236 cm
Q
q
1 0 0 1 62.69291 663.0236 cm
Q
q
1 0 0 1 62.69291 651.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (+1pt if your ) Tj /F3 10 Tf 0 0 0 rg (load_tree ) Tj /F1 10 Tf 0 0 0 rg (function works properly.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 645.0236 cm
Q
q
1 0 0 1 62.69291 633.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (+1pt if your ) Tj /F3 10 Tf 0 0 0 rg (decode ) Tj /F1 10 Tf 0 0 0 rg (program works using arbitrary Huffman trees provided as input.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 627.0236 cm
Q
q
1 0 0 1 62.69291 615.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (+2pt if your ) Tj /F3 10 Tf 0 0 0 rg (encode ) Tj /F1 10 Tf 0 0 0 rg (program constructs minimal Huffman trees for arbitrary inputs.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 615.0236 cm
Q
q
1 0 0 1 62.69291 582.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Overview of Huffman coding) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 564.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Algorithm to encode the data:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 558.0236 cm
Q
q
1 0 0 1 62.69291 558.0236 cm
Q
q
1 0 0 1 62.69291 546.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Compute frequency table of input) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 540.0236 cm
Q
q
1 0 0 1 62.69291 516.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .441163 Tw 12 TL /F1 10 Tf 0 0 0 rg (Translate the frequency table to a tree - This is where the ) Tj /F3 10 Tf 0 0 0 rg (encode ) Tj /F1 10 Tf 0 0 0 rg (program in this assignment also) Tj T* 0 Tw (prints out the coding tree.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 510.0236 cm
Q
q
1 0 0 1 62.69291 498.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Translate the tree to an encoding table) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 492.0236 cm
Q
q
1 0 0 1 62.69291 468.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .177633 Tw 12 TL /F1 10 Tf 0 0 0 rg (Use the encoding table to encode the data - This is where the ) Tj /F3 10 Tf 0 0 0 rg (encode ) Tj /F1 10 Tf 0 0 0 rg (programs emits the encoded) Tj T* 0 Tw (output.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 468.0236 cm
Q
q
1 0 0 1 62.69291 411.3307 cm
Q
q
1 0 0 1 62.69291 382.9843 cm
n 0 14.17323 m 469.8898 14.17323 l S
Q
q
1 0 0 1 62.69291 370.9843 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (1) Tj T* ET
Q
Q
q
1 0 0 1 91.03937 0 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (http://lmgtfy.com/?q=how+to+make+a+tarball) Tj T* ET
Q
Q
q
Q
Q
 
endstream
endobj
24 0 obj
<< /Nums [ 0 25 0 R 1 26 0 R 2 27 0 R ] >>
endobj
25 0 obj
<< /S /D /St 1 >>
endobj
26 0 obj
<< /S /D /St 2 >>
endobj
27 0 obj
<< /S /D /St 3 >>
endobj
xref
0 28
0000000000 65535 f
0000000075 00000 n
0000000129 00000 n
0000000239 00000 n
0000000354 00000 n
0000000462 00000 n
0000000633 00000 n
0000000860 00000 n
0000001069 00000 n
0000001239 00000 n
0000001436 00000 n
0000001670 00000 n
0000001779 00000 n
0000002035 00000 n
0000002112 00000 n
0000002226 00000 n
0000002355 00000 n
0000002516 00000 n
0000002669 00000 n
0000002793 00000 n
0000002924 00000 n
0000003000 00000 n
0000012178 00000 n
0000021517 00000 n
0000027404 00000 n
0000027466 00000 n
0000027503 00000 n
0000027540 00000 n
trailer
<< /ID 
 % ReportLab generated PDF document -- digest (http://www.reportlab.com)
 [(\302\202\336k\341\253\250uTM\365\337\360{b\251) (\302\202\336k\341\253\250uTM\365\337\360{b\251)]
 /Info 12 0 R /Root 11 0 R /Size 28 >>
startxref
27577
%%EOF
